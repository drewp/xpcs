#!/usr/bin/python

from __future__ import division
from twisted.internet import reactor, tksupport
import Tkinter as tk
import time, atexit
from louie import dispatcher

from motorctl import Ctl

class Canv(tk.Canvas):
    def __init__(self, master, **kw):
        tk.Canvas.__init__(self, master, **kw)
        self.create_line(0,0,0,0, tags='cursorx')
        self.create_line(0,0,0,0, tags='cursory')
        dispatcher.connect(self.updateCursor, "coords")
        dispatcher.connect(self.drawPath, "new path")
        self.bind("<B1-Motion>", self.b1motion)

    def canFromWorld(self, wx, wy):
        return -wx / 5 + 300, wy / 5 + 300

    def worldFromCan(self, cx, cy):
        return -(cx - 300) * 5, (cy - 300) * 5

    def updateCursor(self, x, y):
        x,y = self.canFromWorld(x, y)
        self.coords('cursorx', x-10, y, x+10, y)
        self.coords('cursory', x, y-10, x, y+10)

    def b1motion(self, ev):
        wx,wy = self.worldFromCan(ev.x, ev.y)
        dispatcher.send("dragto", x=wx, y=wy)

    def drawPath(self, path):
        self.delete('path')
        pts = []
        for pt in path:
            pts.extend(self.canFromWorld(*pt))
        if len(pts) >= 4:
            self.create_line(*pts, **dict(tag='path'))
        
root = tk.Tk()

ctl = Ctl()

can = Canv(root, width=900, height=900)
can.pack()

for key, byte in [
    ('0', 0),
    ]:
    root.bind("<Key-%s>" % key, lambda ev, byte=byte: ctl.out(byte))

for key, xy in [('Left', (-1, 0)),
                ('Right', (1, 0)),
                ('Up', (0, -1)),
                ('Down', (0, 1))]:
    root.bind("<Key-%s>" % key, lambda ev, xy=xy: ctl.move(*xy))

root.bind("<Key-space>", lambda ev: ctl.toggleBlade())
root.bind("<Key-Escape>", lambda ev: ctl.resetPos())

ctl.move(0,0)



def loop():
    ctl.step()
    root.after(10, loop)
loop()

tksupport.install(root, ms=5)
root.protocol('WM_DELETE_WINDOW', reactor.stop)
reactor.run()

