from __future__ import division
import time, sys, xmlrpclib, atexit, math
from twisted.internet import reactor, tksupport, task
import Tkinter as tk
from elementtree.ElementTree import ElementTree
import Numeric as num
from Scientific.Geometry.VectorModule import Vector

import overshoot
inchPerStep = .00133

def deviceFromSvg(pos):
    inch = pos / 90 * (360 / 480)
    return inch / inchPerStep * (1, -1) + (0, 4 / inchPerStep)

def tracePath(transform, path):
    stepFraction = .2
    #print "   trace path"
    paths = [] # [[p0, p1, p2], [p3, p4, p5], ...]
    pts = [] # current segment x,y pairs
    data = parsePathD(path.get('d'))
    for stepType, stepPts in data:
        stepPts = [deviceFromSvg(
            num.matrixmultiply(transform, [pt[0], pt[1], 1])[:2]
            )
                   for pt in stepPts]
        #print "   next part:", stepType, stepPts[0]
        if stepType == 'M':
            if pts:
                paths.append(pts)
            pts = [stepPts[0]]
        if stepType == 'L':
            p1 = pts[-1]
            p2 = stepPts[0]
            steps = max(num.absolute(p2 - p1))
            for step in range(steps):
                p = num.floor(p1 + (p2 - p1) * step / (steps - 1))
                if Vector(p - pts[-1]).length() > 8:
                    pts.append(p)
            pts.append(p2)
        if stepType == 'C':
            # 3 points for the curve
            startCtl, endCtl = num.array(stepPts[0]), num.array(stepPts[1])
            startPos = num.array(pts[-1])
            endPos = num.array(stepPts[2])
            steps = max(num.absolute(endPos - startPos))
            steps = max(1, steps)
            #print "     curve in %s steps" % steps
            for t in range(steps + 1):
                t /= steps
                p = (    (1 - t)**3 *        startPos+
                     3 * (1 - t)**2 * t    * startCtl+
                     3 * (1 - t)    * t**2 * endCtl+
                                      t**3 * endPos)
                if not pts or Vector(p - pts[-1]).length() > 8:
                    pts.append(p)
            pts.append(stepPts[2])
    if pts:
        paths.append(pts)

    return paths

def parsePathD(data):
    words = data.split()
    ret = []
    while words:
        word = words.pop(0)
        if word in ['M', 'L']:
            pos = [num.array(map(float, words.pop(0).split(',')))]
            ret.append((word, pos))
        elif word == 'C':
            pts = [num.array(map(float, words.pop(0).split(',')))
                   for loop in range(3)]
            ret.append(('C', pts))
    return ret

def walk(node, _paths=None, transform=None):
    if _paths is None:
        _paths = []

    if transform is None:
        transform = num.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])

    children = node.getchildren()
    for i, child in enumerate(children):
        if child.tag == '{http://www.w3.org/2000/svg}defs':
            continue
        print "path child %s of %s" % (i, len(children))
        if child.get('transform'):
            # currently replacing transform, instead of concatenating them
            s = child.get('transform')
            assert s.startswith('matrix(')
            a, b, c, d, e, f = map(float, s[7:-1].split(','))
            transform = num.array([[a, c, e], [b, d, f], [0, 0, 1]])
            print "child xform", transform

        if child.tag == '{http://www.w3.org/2000/svg}path':
            newPaths = tracePath(transform, child)
            print "got %s new paths" % len(newPaths)
            _paths.extend(newPaths)
        walk(child, _paths, transform)
    return _paths


class PathView(tk.Canvas):
    def __init__(self, master, paths, **kw):
        tk.Canvas.__init__(self, master, closeenough=5, **kw)
        self.paths = paths
        self.bind("<Configure>", lambda ev: self.updatePaths())
        self.update()
        self.cursor = self.create_oval(0,0,0,0, width=3)
        self.lastUpdate = None

    def canFromWorld(self, pos):
        size = num.array([self.winfo_width(), self.winfo_height()])
        return (num.array(pos) / (4 / inchPerStep) * size * (1, -1)
                + (0, size[1]))

    def updatePaths(self):
        self.delete('tag')
        for i, path in enumerate(self.paths):
            self.drawPath('tag', path, i)
        self.updateOvershoot()

    def updateOvershoot(self):
        reload(overshoot)
        print "reload overshoot"
        self.delete('overshoot')
        for path in self.paths:
            self.drawOvershoot(path)
        print "finished drawing"
        

    def drawPath(self, tag, pts, index):
        translatedCoords = []
        skipPts = pts
        if len(pts) > 100:
            skipPts = pts[::int(math.ceil(len(pts) / 1000))]
            skipPts.append(pts[-1])
            #print "draw %s of %s pts" % (len(skipPts), len(pts))
        lastPt = None
        for pt in skipPts:
            canPt = self.canFromWorld(pt)
            if (len(translatedCoords) > 4 and
                lastPt is not None and
                max(num.absolute(canPt - lastPt)) < 3):
                continue
            translatedCoords.extend(canPt)
            lastPt = canPt
        line = self.create_line(*translatedCoords, **dict(tag=tag))
        
        self.create_text(translatedCoords[0], translatedCoords[1]+10,
                         text=str(index), font="6x10", fill='red', tag=tag)

        for ev, attrs in [("<Enter>", dict(fill='red', width=2)),
                          ("<Leave>", dict(fill='black', width=1))]:
            self.tag_bind(line, ev,
                          lambda ev, attrs=attrs: self.itemconfig(line,
                                                                  **attrs))
        for ev, cmd in [("<ButtonPress-1>", lambda ev: self.cut(pts)),
                        ("<ButtonPress-2>", lambda ev: self.listPath(index)),
                        ]:
            self.tag_bind(line, ev, cmd)
        
    def listPath(self, index):
        print "path %s (%s pts)" % (index, len(self.paths[index]))

    def drawOvershoot(self, pts):

        translatedCoords = []
        tp = [self.canFromWorld(pt) for pt in overshoot.overshootPath(pts)]
        for p in tp:
            #self.create_oval(p[0]-2, p[1]-2, p[0]+2, p[1]+2,
            #                 width=0, fill='blue', tag=tag)
            translatedCoords.extend(p)
        if len(translatedCoords) >= 4:
            l = self.create_line(*translatedCoords, **dict(tag='overshoot', fill='blue'))
            self.lower(l)

        

    def updateCursor(self):
        x, y, blade = ctl.getPosition()
        cx, cy = self.canFromWorld([x, y])
        self.coords(self.cursor, cx-3, cy-3, cx+3, cy+3)
        
    def cut(self, pts):
        t1 = time.time()
        pts = overshoot.overshootPath(pts)
        ctl.lineTo(pts[0][0], pts[0][1], False)
        for p1, p2 in zip(pts[:-1], pts[1:]):
            self.cutLine(p1, p2)
        ctl.lineTo(pts[-1][0], pts[-1][1], False)
        print "path took %.1f sec" % (time.time() - t1)

    def cutLine(self, p1, p2):
        coarse = .3 # reduce the fine steps into crude ones
        steps = int(max(2, coarse * max(num.absolute(p2 - p1))))
        #print "lineTo", p2, steps
        for step in range(steps):
            p = num.floor(p1 + (p2 - p1) * step / (steps - 1))
            ctl.lineTo(p[0], p[1], True)
            now = time.time()
            if self.lastUpdate is None or now - self.lastUpdate > .2:
                self.updateCursor()
                self.update()
                self.lastUpdate = now
                
    def cutAll(self):
        t1 = time.time()
        left = dict(enumerate(self.paths[:]))
        # some crazy timing bug where the blade stopped releasing
        # after this path, but adding extra delay makes it
        # ok. happened on out #6.
        self.cut(self.paths[10])
        time.sleep(2)
        for i in [7, 9, 12, 2, 0, 8, 16, # top building
                  17, 15, # slivers below shin

                  25, 24, 23, 22, 21, # windows
                  20, 38, 37, 31, 33, 35, 34, 32,
                  19, 
                  ]:
            print "priority path", i
            self.cut(self.paths[i])
            del left[i]
        for i, p in sorted(left.items()):
            print "remaining path", i
            self.cut(p)

        print "cut all in %.1f sec" % (time.time() - t1)
            

class PathList(tk.Listbox):
    def __init__(self, master):
        tk.Listbox.__init__(self, master)
        

ctl = xmlrpclib.ServerProxy("http://bang:9001")
atexit.register(ctl.stop)
    
t = ElementTree(file=open(sys.argv[1]))
paths = walk(t.getroot())
print len(paths), "total paths"

#IPShellEmbed()()

print "done"

root = tk.Tk()
root.wm_geometry("+560+80")
root.bind("<Key-Escape>", lambda ev: reactor.stop())

pv = PathView(root, paths, width=1100, height=1100)
pv.pack(side='left', fill='both', expand=True)
pv.update()
task.LoopingCall(pv.updateCursor).start(.1)
root.bind("<Control-Key-a>", lambda ev: pv.cutAll())
root.bind("<Control-Key-r>", lambda ev: pv.updateOvershoot())
#root.bind("<Key-l>", lambda ev: pv.event_generate("<Key-l>", x=ev.x, y=ev.y, state=ev.state, time=ev.time, serial=ev.serial))
#pv.bind("<Key-l>", lambda ev: sys.stdout.write("pvl\n"))
#root.tk_focusFollowsMouse()


#pl = PathList(root)
#pl.pack(side='left', fill='y')
#for path in paths:
#    pl.insert('end', "%r (%s)" % (id(path), len(path)))
#    root.update()


tksupport.install(root)
root.protocol('WM_DELETE_WINDOW', reactor.stop)
reactor.run()
